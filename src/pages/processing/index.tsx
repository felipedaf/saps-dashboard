import Head from "next/head";
import Image from "next/image";
import logo from "../../../public/logo-abertura.svg";
import { Roboto } from "next/font/google";
import NavigationModal from "@components/compound/NavigationModal";
import {
  Box,
  Container,
  Fade,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableFooter,
  TableHead,
  TablePagination,
  TableRow,
} from "@mui/material";
import { useCallback, useEffect, useMemo, useRef } from "react";
import useHandler from "./useHandler";

const roboto = Roboto({
  weight: ["400", "500", "700"],
  subsets: ["latin-ext"],
});

export default function Processing() {
  const {
    dataInfo,
    columnTitles,
    page,
    rowsPerPage,
    handleChangePage,
    handleChangeRowsPerPage,
  } = useHandler();

  const rowsPerPageFixed = useRef(rowsPerPage);

  const headCells = useMemo(() => {
    const result = [];

    const props = {
      fontWeight: "700",
    };

    if (columnTitles.length > 0)
      result.push(
        <TableCell {...props} key={columnTitles[0]}>
          {columnTitles[0]}
        </TableCell>
      );

    for (let i = 1; i < columnTitles.length; i++) {
      result.push(
        <TableCell {...props} key={columnTitles[i]} align="right">
          {columnTitles[i]}
        </TableCell>
      );
    }

    return result;
  }, [columnTitles]);

  const bodyCell = useCallback((row: (string | number)[]) => {
    const result = [];

    if (row.length > 0)
      result.push(
        <TableCell key={String(0)} component="th" scope="row">
          {row[0]}
        </TableCell>
      );

    for (let i = 1; i < row.length; i++) {
      result.push(
        <TableCell key={String(i)} align="right">
          {row[i]}
        </TableCell>
      );
    }

    return result;
  }, []);

  return (
    <>
      <Head>
        <title>SAPS | Processing</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavigationModal />
      <main className={roboto.className}>
        <Fade in={true} unmountOnExit>
          <Box
            sx={{
              height: "100vh",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <Box
              sx={{
                minHeight: "64px",
                width: "100%",
                maxHeight: "64px",
                padding: "4px 0",
                backgroundColor: "primary.main",
                display: "flex",
                justifyContent: "center",
              }}
              color="primary"
            >
              <Image
                src={logo}
                alt="Logo"
                style={{
                  objectFit: "contain",
                  height: "100%",
                  marginBottom: "24px",
                }}
              />
            </Box>
            <Box
              sx={{
                flexGrow: 1,
                width: "100%",
              }}
            >
              <Container
                sx={{
                  padding: "2vh 0",
                }}
              >
                <TableContainer component={Paper}>
                  <Table>
                    <TableHead>
                      <TableRow>{headCells}</TableRow>
                    </TableHead>
                    <TableBody>
                      {dataInfo.data.map((d, i) => {
                        return (
                          <TableRow key={String(i)}>{bodyCell(d)}</TableRow>
                        );
                      })}
                    </TableBody>
                    <TableFooter>
                      <TableRow>
                        <TablePagination
                          rowsPerPageOptions={[1, 2, 3].map(
                            (multiplier) =>
                              multiplier * rowsPerPageFixed.current
                          )}
                          colSpan={columnTitles.length}
                          count={dataInfo.size}
                          rowsPerPage={rowsPerPage}
                          page={page}
                          SelectProps={{
                            inputProps: {
                              "aria-label": "rows per page",
                            },
                            native: true,
                          }}
                          onPageChange={handleChangePage}
                          onRowsPerPageChange={handleChangeRowsPerPage}
                        />
                      </TableRow>
                    </TableFooter>
                  </Table>
                </TableContainer>
              </Container>
            </Box>
          </Box>
        </Fade>
      </main>
    </>
  );
}
